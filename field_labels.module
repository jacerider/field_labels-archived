<?php

/**
 * @file
 * Main file for Field Display Label module.
 */

use Drupal\Core\Config\Entity\ThirdPartySettingsInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Field\BaseFieldDefinition;

/**
 * Implements hook_form_FORM_ID_alter() for field_config_edit_form().
 */
function field_labels_form_field_config_edit_form_alter(&$form, FormStateInterface $form_state) {
  $field = $form_state->getFormObject()->getEntity();
  if (!isset($field)) {
    return;
  }
  $form['label']['#maxlength'] = 256;

  $form['form_label'] = [
    '#type' => 'textfield',
    '#title' => t('Form label'),
    '#description' => t('A separate label for this field when showing as a field in a form. Leave blank to use the default field label.'),
    '#weight' => $form['label']['#weight'] + 1,
    '#default_value' => !empty($field->getThirdPartySetting('field_labels', 'form_label')) ? $field->getThirdPartySetting('field_labels', 'form_label') : '',
    '#maxlength' => 256,
  ];

  $form['display_label'] = [
    '#type' => 'textfield',
    '#title' => t('Display label'),
    '#description' => t('A separate label for viewing this field. Leave blank to use the default field label.'),
    '#weight' => $form['label']['#weight'] + 1,
    '#default_value' => !empty($field->getThirdPartySetting('field_labels', 'display_label')) ? $field->getThirdPartySetting('field_labels', 'display_label') : '',
    '#maxlength' => 256,
  ];
  $form['actions']['submit']['#submit'][] = 'field_labels_form_field_config_edit_form_submit';
}

/**
 * Form submission handler for field_labels_form_field_config_edit_form_alter.
 *
 * @param array $form
 *   The form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function field_labels_form_field_config_edit_form_submit(array $form, FormStateInterface $form_state) {
  $field = $form_state->getFormObject()->getEntity();
  $form_fields = &$form_state->getValues();
  // If the label is entered update settings.
  if ($form_fields['form_label']) {
    $field->setThirdPartySetting('field_labels', 'form_label', $form_fields['form_label']);
    $field->save();
  }
  else {
    $field->unsetThirdPartySetting('field_labels', 'form_label');
    $field->save();
  }
  // If the label is entered update settings.
  if ($form_fields['display_label']) {
    $field->setThirdPartySetting('field_labels', 'display_label', $form_fields['display_label']);
    $field->save();
  }
  else {
    $field->unsetThirdPartySetting('field_labels', 'display_label');
    $field->save();
  }
}

/**
 * Implements hook_preprocess_field().
 */
function field_labels_preprocess_field(&$variables) {
  $element = $variables['element'];
  $entity = $element['#object'];
  $field_definition = $entity->getFieldDefinition($element['#field_name']);
  if ($field_definition instanceof BaseFieldDefinition) {
    $settings = $field_definition->getSettings();
    if (!empty($settings['field_labels']['display_label'])) {
      $variables['label'] = $settings['field_labels']['display_label'];
    }
  }
  if ($field_definition instanceof ThirdPartySettingsInterface) {
    $definition = $field_definition->getThirdPartySetting('field_labels', 'display_label');
    if (isset($definition) && !empty($definition)) {
      $variables['label'] = $definition;
    }
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function field_labels_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  $entity = $context['items']->getEntity();
  $field_definition = $entity->getFieldDefinition($context['items']->getName());
  if ($field_definition instanceof BaseFieldDefinition) {
    $settings = $field_definition->getSettings();
    if (!empty($settings['field_labels']['form_label'])) {
      $definition = $settings['field_labels']['form_label'];
      field_labels_set_element_title($element, $definition, $field_definition->getLabel());
    }
  }
  if ($field_definition instanceof ThirdPartySettingsInterface) {
    $definition = $field_definition->getThirdPartySetting('field_labels', 'form_label');
    if (isset($definition) && !empty($definition)) {
      field_labels_set_element_title($element, $definition, $field_definition->getLabel());
    }
  }
}

/**
 * Recursively update title.
 */
function field_labels_set_element_title(&$element, $new_title, $current_title) {
  if (isset($element['#type']) && in_array($element['#type'], [
    'link',
    'submit',
    'button',
    'radio',
  ])) {
    return;
  }
  if (!empty($element['#title_lock'])) {
    return;
  }
  if (isset($element['#type']) && in_array($element['#type'], ['html_tag'])) {
    $element['#value'] = str_replace($current_title, $new_title, $element['#value']);
  }
  if (isset($element['#title'])) {
    $element['#title'] = $new_title;
  }
  foreach (Element::children($element) as $key) {
    $child_element = &$element[$key];
    field_labels_set_element_title($child_element, $new_title, $current_title);
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function field_labels_entity_type_alter(array &$entity_types) {
  $entity_types['field_config']->setListBuilderClass('\Drupal\field_labels\FieldLabelsFieldConfigListBuilder');
}
